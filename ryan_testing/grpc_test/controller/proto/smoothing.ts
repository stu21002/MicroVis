// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: smoothing.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface SmoothingOutput {
  value: string;
}

export interface SmoothingEmpty {
}

function createBaseSmoothingOutput(): SmoothingOutput {
  return { value: "" };
}

export const SmoothingOutput = {
  encode(message: SmoothingOutput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SmoothingOutput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmoothingOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmoothingOutput {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: SmoothingOutput): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmoothingOutput>, I>>(base?: I): SmoothingOutput {
    return SmoothingOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmoothingOutput>, I>>(object: I): SmoothingOutput {
    const message = createBaseSmoothingOutput();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSmoothingEmpty(): SmoothingEmpty {
  return {};
}

export const SmoothingEmpty = {
  encode(_: SmoothingEmpty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SmoothingEmpty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmoothingEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SmoothingEmpty {
    return {};
  },

  toJSON(_: SmoothingEmpty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SmoothingEmpty>, I>>(base?: I): SmoothingEmpty {
    return SmoothingEmpty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmoothingEmpty>, I>>(_: I): SmoothingEmpty {
    const message = createBaseSmoothingEmpty();
    return message;
  },
};

export type SmoothingServicesService = typeof SmoothingServicesService;
export const SmoothingServicesService = {
  computeGuassianBlur: {
    path: "/SmoothingServices/computeGuassianBlur",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SmoothingEmpty) => Buffer.from(SmoothingEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SmoothingEmpty.decode(value),
    responseSerialize: (value: SmoothingOutput) => Buffer.from(SmoothingOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SmoothingOutput.decode(value),
  },
  computeBlockSmoothing: {
    path: "/SmoothingServices/computeBlockSmoothing",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SmoothingEmpty) => Buffer.from(SmoothingEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SmoothingEmpty.decode(value),
    responseSerialize: (value: SmoothingOutput) => Buffer.from(SmoothingOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SmoothingOutput.decode(value),
  },
} as const;

export interface SmoothingServicesServer extends UntypedServiceImplementation {
  computeGuassianBlur: handleUnaryCall<SmoothingEmpty, SmoothingOutput>;
  computeBlockSmoothing: handleUnaryCall<SmoothingEmpty, SmoothingOutput>;
}

export interface SmoothingServicesClient extends Client {
  computeGuassianBlur(
    request: SmoothingEmpty,
    callback: (error: ServiceError | null, response: SmoothingOutput) => void,
  ): ClientUnaryCall;
  computeGuassianBlur(
    request: SmoothingEmpty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SmoothingOutput) => void,
  ): ClientUnaryCall;
  computeGuassianBlur(
    request: SmoothingEmpty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SmoothingOutput) => void,
  ): ClientUnaryCall;
  computeBlockSmoothing(
    request: SmoothingEmpty,
    callback: (error: ServiceError | null, response: SmoothingOutput) => void,
  ): ClientUnaryCall;
  computeBlockSmoothing(
    request: SmoothingEmpty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SmoothingOutput) => void,
  ): ClientUnaryCall;
  computeBlockSmoothing(
    request: SmoothingEmpty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SmoothingOutput) => void,
  ): ClientUnaryCall;
}

export const SmoothingServicesClient = makeGenericClientConstructor(
  SmoothingServicesService,
  "SmoothingServices",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SmoothingServicesClient;
  service: typeof SmoothingServicesService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
