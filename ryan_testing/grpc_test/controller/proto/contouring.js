"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: contouring.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContourServicesClient = exports.ContourServicesService = exports.ContouringEmpty = exports.ContouringOutput = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_js_1 = require("@grpc/grpc-js");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "";
function createBaseContouringOutput() {
    return { value: "" };
}
exports.ContouringOutput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContouringOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ContouringOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContouringOutput();
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseContouringEmpty() {
    return { data: [], width: 0, height: 0 };
}
exports.ContouringEmpty = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.data) {
            writer.float(v);
        }
        writer.ldelim();
        if (message.width !== 0) {
            writer.uint32(21).float(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(29).float(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContouringEmpty();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 13) {
                        message.data.push(reader.float());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.data.push(reader.float());
                        }
                        continue;
                    }
                    break;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.width = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.height = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: globalThis.Array.isArray(object?.data) ? object.data.map((e) => globalThis.Number(e)) : [],
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data?.length) {
            obj.data = message.data;
        }
        if (message.width !== 0) {
            obj.width = message.width;
        }
        if (message.height !== 0) {
            obj.height = message.height;
        }
        return obj;
    },
    create(base) {
        return exports.ContouringEmpty.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContouringEmpty();
        message.data = object.data?.map((e) => e) || [];
        message.width = object.width ?? 0;
        message.height = object.height ?? 0;
        return message;
    },
};
exports.ContourServicesService = {
    computeContour: {
        path: "/ContourServices/computeContour",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.ContouringEmpty.encode(value).finish()),
        requestDeserialize: (value) => exports.ContouringEmpty.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ContouringOutput.encode(value).finish()),
        responseDeserialize: (value) => exports.ContouringOutput.decode(value),
    },
};
exports.ContourServicesClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.ContourServicesService, "ContourServices");
function isSet(value) {
    return value !== null && value !== undefined;
}
