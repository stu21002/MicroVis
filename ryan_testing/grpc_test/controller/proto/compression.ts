// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: compression.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface CompressionOutput {
  value: string;
}

export interface CompressionEmpty {
}

function createBaseCompressionOutput(): CompressionOutput {
  return { value: "" };
}

export const CompressionOutput = {
  encode(message: CompressionOutput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompressionOutput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressionOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompressionOutput {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: CompressionOutput): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompressionOutput>, I>>(base?: I): CompressionOutput {
    return CompressionOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompressionOutput>, I>>(object: I): CompressionOutput {
    const message = createBaseCompressionOutput();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCompressionEmpty(): CompressionEmpty {
  return {};
}

export const CompressionEmpty = {
  encode(_: CompressionEmpty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompressionEmpty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressionEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CompressionEmpty {
    return {};
  },

  toJSON(_: CompressionEmpty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CompressionEmpty>, I>>(base?: I): CompressionEmpty {
    return CompressionEmpty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompressionEmpty>, I>>(_: I): CompressionEmpty {
    const message = createBaseCompressionEmpty();
    return message;
  },
};

export type CompressionServicesService = typeof CompressionServicesService;
export const CompressionServicesService = {
  computeCompression: {
    path: "/CompressionServices/computeCompression",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompressionEmpty) => Buffer.from(CompressionEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CompressionEmpty.decode(value),
    responseSerialize: (value: CompressionOutput) => Buffer.from(CompressionOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CompressionOutput.decode(value),
  },
  computeNanEncodingsBlock: {
    path: "/CompressionServices/computeNanEncodingsBlock",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompressionEmpty) => Buffer.from(CompressionEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CompressionEmpty.decode(value),
    responseSerialize: (value: CompressionOutput) => Buffer.from(CompressionOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CompressionOutput.decode(value),
  },
} as const;

export interface CompressionServicesServer extends UntypedServiceImplementation {
  computeCompression: handleUnaryCall<CompressionEmpty, CompressionOutput>;
  computeNanEncodingsBlock: handleUnaryCall<CompressionEmpty, CompressionOutput>;
}

export interface CompressionServicesClient extends Client {
  computeCompression(
    request: CompressionEmpty,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeCompression(
    request: CompressionEmpty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeCompression(
    request: CompressionEmpty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeNanEncodingsBlock(
    request: CompressionEmpty,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeNanEncodingsBlock(
    request: CompressionEmpty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeNanEncodingsBlock(
    request: CompressionEmpty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
}

export const CompressionServicesClient = makeGenericClientConstructor(
  CompressionServicesService,
  "CompressionServices",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CompressionServicesClient;
  service: typeof CompressionServicesService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
