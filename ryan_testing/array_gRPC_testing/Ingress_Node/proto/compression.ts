// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: compression.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface CompressionOutput {
  success: string;
}

export interface CompressionEmpty {
  data: number[];
  width: number;
  height: number;
  precision: number;
  offset: number;
  index: number;
}

export interface NanEncodingMessage {
  data: number[];
  offset: number;
  width: number;
  height: number;
  index: number;
}

export interface NanEncodingResponse {
  success: string;
}

function createBaseCompressionOutput(): CompressionOutput {
  return { success: "" };
}

export const CompressionOutput = {
  encode(message: CompressionOutput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== "") {
      writer.uint32(10).string(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompressionOutput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressionOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.success = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompressionOutput {
    return { success: isSet(object.success) ? globalThis.String(object.success) : "" };
  },

  toJSON(message: CompressionOutput): unknown {
    const obj: any = {};
    if (message.success !== "") {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompressionOutput>, I>>(base?: I): CompressionOutput {
    return CompressionOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompressionOutput>, I>>(object: I): CompressionOutput {
    const message = createBaseCompressionOutput();
    message.success = object.success ?? "";
    return message;
  },
};

function createBaseCompressionEmpty(): CompressionEmpty {
  return { data: [], width: 0, height: 0, precision: 0, offset: 0, index: 0 };
}

export const CompressionEmpty = {
  encode(message: CompressionEmpty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.data) {
      writer.float(v);
    }
    writer.ldelim();
    if (message.width !== 0) {
      writer.uint32(21).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(29).float(message.height);
    }
    if (message.precision !== 0) {
      writer.uint32(37).float(message.precision);
    }
    if (message.offset !== 0) {
      writer.uint32(45).float(message.offset);
    }
    if (message.index !== 0) {
      writer.uint32(53).float(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompressionEmpty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressionEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.data.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.data.push(reader.float());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.width = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.height = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.precision = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.offset = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.index = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompressionEmpty {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => globalThis.Number(e)) : [],
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      precision: isSet(object.precision) ? globalThis.Number(object.precision) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
    };
  },

  toJSON(message: CompressionEmpty): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.precision !== 0) {
      obj.precision = message.precision;
    }
    if (message.offset !== 0) {
      obj.offset = message.offset;
    }
    if (message.index !== 0) {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompressionEmpty>, I>>(base?: I): CompressionEmpty {
    return CompressionEmpty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompressionEmpty>, I>>(object: I): CompressionEmpty {
    const message = createBaseCompressionEmpty();
    message.data = object.data?.map((e) => e) || [];
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.precision = object.precision ?? 0;
    message.offset = object.offset ?? 0;
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseNanEncodingMessage(): NanEncodingMessage {
  return { data: [], offset: 0, width: 0, height: 0, index: 0 };
}

export const NanEncodingMessage = {
  encode(message: NanEncodingMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.data) {
      writer.float(v);
    }
    writer.ldelim();
    if (message.offset !== 0) {
      writer.uint32(21).float(message.offset);
    }
    if (message.width !== 0) {
      writer.uint32(29).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(37).float(message.height);
    }
    if (message.index !== 0) {
      writer.uint32(45).float(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NanEncodingMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNanEncodingMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.data.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.data.push(reader.float());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.offset = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.width = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.height = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.index = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NanEncodingMessage {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => globalThis.Number(e)) : [],
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
    };
  },

  toJSON(message: NanEncodingMessage): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data;
    }
    if (message.offset !== 0) {
      obj.offset = message.offset;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.index !== 0) {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NanEncodingMessage>, I>>(base?: I): NanEncodingMessage {
    return NanEncodingMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NanEncodingMessage>, I>>(object: I): NanEncodingMessage {
    const message = createBaseNanEncodingMessage();
    message.data = object.data?.map((e) => e) || [];
    message.offset = object.offset ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseNanEncodingResponse(): NanEncodingResponse {
  return { success: "" };
}

export const NanEncodingResponse = {
  encode(message: NanEncodingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== "") {
      writer.uint32(10).string(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NanEncodingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNanEncodingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.success = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NanEncodingResponse {
    return { success: isSet(object.success) ? globalThis.String(object.success) : "" };
  },

  toJSON(message: NanEncodingResponse): unknown {
    const obj: any = {};
    if (message.success !== "") {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NanEncodingResponse>, I>>(base?: I): NanEncodingResponse {
    return NanEncodingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NanEncodingResponse>, I>>(object: I): NanEncodingResponse {
    const message = createBaseNanEncodingResponse();
    message.success = object.success ?? "";
    return message;
  },
};

export type CompressionServicesService = typeof CompressionServicesService;
export const CompressionServicesService = {
  computeCompression: {
    path: "/CompressionServices/computeCompression",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompressionEmpty) => Buffer.from(CompressionEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CompressionEmpty.decode(value),
    responseSerialize: (value: CompressionOutput) => Buffer.from(CompressionOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CompressionOutput.decode(value),
  },
  computeDecompression: {
    path: "/CompressionServices/computeDecompression",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompressionEmpty) => Buffer.from(CompressionEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CompressionEmpty.decode(value),
    responseSerialize: (value: CompressionOutput) => Buffer.from(CompressionOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CompressionOutput.decode(value),
  },
  computeNanEncodingsBlock: {
    path: "/CompressionServices/computeNanEncodingsBlock",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NanEncodingMessage) => Buffer.from(NanEncodingMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NanEncodingMessage.decode(value),
    responseSerialize: (value: NanEncodingResponse) => Buffer.from(NanEncodingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NanEncodingResponse.decode(value),
  },
} as const;

export interface CompressionServicesServer extends UntypedServiceImplementation {
  computeCompression: handleUnaryCall<CompressionEmpty, CompressionOutput>;
  computeDecompression: handleUnaryCall<CompressionEmpty, CompressionOutput>;
  computeNanEncodingsBlock: handleUnaryCall<NanEncodingMessage, NanEncodingResponse>;
}

export interface CompressionServicesClient extends Client {
  computeCompression(
    request: CompressionEmpty,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeCompression(
    request: CompressionEmpty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeCompression(
    request: CompressionEmpty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeDecompression(
    request: CompressionEmpty,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeDecompression(
    request: CompressionEmpty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeDecompression(
    request: CompressionEmpty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CompressionOutput) => void,
  ): ClientUnaryCall;
  computeNanEncodingsBlock(
    request: NanEncodingMessage,
    callback: (error: ServiceError | null, response: NanEncodingResponse) => void,
  ): ClientUnaryCall;
  computeNanEncodingsBlock(
    request: NanEncodingMessage,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NanEncodingResponse) => void,
  ): ClientUnaryCall;
  computeNanEncodingsBlock(
    request: NanEncodingMessage,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NanEncodingResponse) => void,
  ): ClientUnaryCall;
}

export const CompressionServicesClient = makeGenericClientConstructor(
  CompressionServicesService,
  "CompressionServices",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CompressionServicesClient;
  service: typeof CompressionServicesService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
