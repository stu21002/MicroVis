// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: Region.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { RegionInfo } from "./defs";

export const protobufPackage = "proto";

export interface SetRegion {
  fileId: string;
  regionId: number;
  regionInfo: RegionInfo | undefined;
}

export interface SetRegionAck {
  success: boolean;
  message: string;
  regionId: number;
}

function createBaseSetRegion(): SetRegion {
  return { fileId: "", regionId: 0, regionInfo: undefined };
}

export const SetRegion = {
  encode(message: SetRegion, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fileId !== "") {
      writer.uint32(10).string(message.fileId);
    }
    if (message.regionId !== 0) {
      writer.uint32(21).sfixed32(message.regionId);
    }
    if (message.regionInfo !== undefined) {
      RegionInfo.encode(message.regionInfo, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetRegion {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRegion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileId = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.regionId = reader.sfixed32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.regionInfo = RegionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRegion {
    return {
      fileId: isSet(object.fileId) ? globalThis.String(object.fileId) : "",
      regionId: isSet(object.regionId) ? globalThis.Number(object.regionId) : 0,
      regionInfo: isSet(object.regionInfo) ? RegionInfo.fromJSON(object.regionInfo) : undefined,
    };
  },

  toJSON(message: SetRegion): unknown {
    const obj: any = {};
    if (message.fileId !== "") {
      obj.fileId = message.fileId;
    }
    if (message.regionId !== 0) {
      obj.regionId = Math.round(message.regionId);
    }
    if (message.regionInfo !== undefined) {
      obj.regionInfo = RegionInfo.toJSON(message.regionInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRegion>, I>>(base?: I): SetRegion {
    return SetRegion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRegion>, I>>(object: I): SetRegion {
    const message = createBaseSetRegion();
    message.fileId = object.fileId ?? "";
    message.regionId = object.regionId ?? 0;
    message.regionInfo = (object.regionInfo !== undefined && object.regionInfo !== null)
      ? RegionInfo.fromPartial(object.regionInfo)
      : undefined;
    return message;
  },
};

function createBaseSetRegionAck(): SetRegionAck {
  return { success: false, message: "", regionId: 0 };
}

export const SetRegionAck = {
  encode(message: SetRegionAck, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.regionId !== 0) {
      writer.uint32(29).sfixed32(message.regionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetRegionAck {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRegionAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.regionId = reader.sfixed32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRegionAck {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      regionId: isSet(object.regionId) ? globalThis.Number(object.regionId) : 0,
    };
  },

  toJSON(message: SetRegionAck): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.regionId !== 0) {
      obj.regionId = Math.round(message.regionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRegionAck>, I>>(base?: I): SetRegionAck {
    return SetRegionAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRegionAck>, I>>(object: I): SetRegionAck {
    const message = createBaseSetRegionAck();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.regionId = object.regionId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
