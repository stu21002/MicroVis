// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: ImageData.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { RegionType, regionTypeFromJSON, regionTypeToJSON } from "./defs";

export const protobufPackage = "proto";

export interface ImageDataRequest {
  uuid: string;
  regionType: RegionType;
  start: number[];
  count: number[];
}

export interface ImageDataResponse {
  rawValuesFp32: Uint8Array;
  numPixels: number;
}

function createBaseImageDataRequest(): ImageDataRequest {
  return { uuid: "", regionType: 0, start: [], count: [] };
}

export const ImageDataRequest = {
  encode(message: ImageDataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.regionType !== 0) {
      writer.uint32(16).int32(message.regionType);
    }
    writer.uint32(26).fork();
    for (const v of message.start) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImageDataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.regionType = reader.int32() as any;
          continue;
        case 3:
          if (tag === 24) {
            message.start.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.start.push(reader.int32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageDataRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      regionType: isSet(object.regionType) ? regionTypeFromJSON(object.regionType) : 0,
      start: globalThis.Array.isArray(object?.start) ? object.start.map((e: any) => globalThis.Number(e)) : [],
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ImageDataRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.regionType !== 0) {
      obj.regionType = regionTypeToJSON(message.regionType);
    }
    if (message.start?.length) {
      obj.start = message.start.map((e) => Math.round(e));
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageDataRequest>, I>>(base?: I): ImageDataRequest {
    return ImageDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageDataRequest>, I>>(object: I): ImageDataRequest {
    const message = createBaseImageDataRequest();
    message.uuid = object.uuid ?? "";
    message.regionType = object.regionType ?? 0;
    message.start = object.start?.map((e) => e) || [];
    message.count = object.count?.map((e) => e) || [];
    return message;
  },
};

function createBaseImageDataResponse(): ImageDataResponse {
  return { rawValuesFp32: new Uint8Array(0), numPixels: 0 };
}

export const ImageDataResponse = {
  encode(message: ImageDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rawValuesFp32.length !== 0) {
      writer.uint32(10).bytes(message.rawValuesFp32);
    }
    if (message.numPixels !== 0) {
      writer.uint32(16).int32(message.numPixels);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImageDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rawValuesFp32 = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numPixels = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageDataResponse {
    return {
      rawValuesFp32: isSet(object.rawValuesFp32) ? bytesFromBase64(object.rawValuesFp32) : new Uint8Array(0),
      numPixels: isSet(object.numPixels) ? globalThis.Number(object.numPixels) : 0,
    };
  },

  toJSON(message: ImageDataResponse): unknown {
    const obj: any = {};
    if (message.rawValuesFp32.length !== 0) {
      obj.rawValuesFp32 = base64FromBytes(message.rawValuesFp32);
    }
    if (message.numPixels !== 0) {
      obj.numPixels = Math.round(message.numPixels);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageDataResponse>, I>>(base?: I): ImageDataResponse {
    return ImageDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageDataResponse>, I>>(object: I): ImageDataResponse {
    const message = createBaseImageDataResponse();
    message.rawValuesFp32 = object.rawValuesFp32 ?? new Uint8Array(0);
    message.numPixels = object.numPixels ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
