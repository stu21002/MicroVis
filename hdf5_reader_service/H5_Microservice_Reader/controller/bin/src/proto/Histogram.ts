// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: Histogram.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "proto";

export interface HistogramRequest {
  uuid: string;
  /**
   * int32 x = 2;
   * int32 y = 3;
   * int32 width = 4;
   * int32 height = 5;
   */
  start: number[];
  count: number[];
}

export interface HistogramDistRequest {
  uuid: string;
  /**
   * int32 x = 2;
   * int32 y = 3;
   * int32 width = 4;
   * int32 height = 5;
   */
  start: number[];
  count: number[];
  data: number[];
  numBins: number;
  binWidth: number;
  minValue: number;
  maxValue: number;
}

export interface HistogramResponse {
  numBins: number;
  binWidth: number;
  firstBinCenter: number;
  bins: number[];
  mean: number;
  stdDev: number;
}

export interface SetHistogramReq {
  uuid: string;
  x: number;
  y: number;
  z: number;
  width: number;
  height: number;
  depth: number;
}

function createBaseHistogramRequest(): HistogramRequest {
  return { uuid: "", start: [], count: [] };
}

export const HistogramRequest = {
  encode(message: HistogramRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    writer.uint32(18).fork();
    for (const v of message.start) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(26).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HistogramRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogramRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.start.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.start.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistogramRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      start: globalThis.Array.isArray(object?.start) ? object.start.map((e: any) => globalThis.Number(e)) : [],
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: HistogramRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.start?.length) {
      obj.start = message.start.map((e) => Math.round(e));
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistogramRequest>, I>>(base?: I): HistogramRequest {
    return HistogramRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistogramRequest>, I>>(object: I): HistogramRequest {
    const message = createBaseHistogramRequest();
    message.uuid = object.uuid ?? "";
    message.start = object.start?.map((e) => e) || [];
    message.count = object.count?.map((e) => e) || [];
    return message;
  },
};

function createBaseHistogramDistRequest(): HistogramDistRequest {
  return { uuid: "", start: [], count: [], data: [], numBins: 0, binWidth: 0, minValue: 0, maxValue: 0 };
}

export const HistogramDistRequest = {
  encode(message: HistogramDistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    writer.uint32(18).fork();
    for (const v of message.start) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(26).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.data) {
      writer.float(v);
    }
    writer.ldelim();
    if (message.numBins !== 0) {
      writer.uint32(53).sfixed32(message.numBins);
    }
    if (message.binWidth !== 0) {
      writer.uint32(57).double(message.binWidth);
    }
    if (message.minValue !== 0) {
      writer.uint32(65).double(message.minValue);
    }
    if (message.maxValue !== 0) {
      writer.uint32(73).double(message.maxValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HistogramDistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogramDistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.start.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.start.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 37) {
            message.data.push(reader.float());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.data.push(reader.float());
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.numBins = reader.sfixed32();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.binWidth = reader.double();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.minValue = reader.double();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.maxValue = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistogramDistRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      start: globalThis.Array.isArray(object?.start) ? object.start.map((e: any) => globalThis.Number(e)) : [],
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => globalThis.Number(e)) : [],
      numBins: isSet(object.numBins) ? globalThis.Number(object.numBins) : 0,
      binWidth: isSet(object.binWidth) ? globalThis.Number(object.binWidth) : 0,
      minValue: isSet(object.minValue) ? globalThis.Number(object.minValue) : 0,
      maxValue: isSet(object.maxValue) ? globalThis.Number(object.maxValue) : 0,
    };
  },

  toJSON(message: HistogramDistRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.start?.length) {
      obj.start = message.start.map((e) => Math.round(e));
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    if (message.data?.length) {
      obj.data = message.data;
    }
    if (message.numBins !== 0) {
      obj.numBins = Math.round(message.numBins);
    }
    if (message.binWidth !== 0) {
      obj.binWidth = message.binWidth;
    }
    if (message.minValue !== 0) {
      obj.minValue = message.minValue;
    }
    if (message.maxValue !== 0) {
      obj.maxValue = message.maxValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistogramDistRequest>, I>>(base?: I): HistogramDistRequest {
    return HistogramDistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistogramDistRequest>, I>>(object: I): HistogramDistRequest {
    const message = createBaseHistogramDistRequest();
    message.uuid = object.uuid ?? "";
    message.start = object.start?.map((e) => e) || [];
    message.count = object.count?.map((e) => e) || [];
    message.data = object.data?.map((e) => e) || [];
    message.numBins = object.numBins ?? 0;
    message.binWidth = object.binWidth ?? 0;
    message.minValue = object.minValue ?? 0;
    message.maxValue = object.maxValue ?? 0;
    return message;
  },
};

function createBaseHistogramResponse(): HistogramResponse {
  return { numBins: 0, binWidth: 0, firstBinCenter: 0, bins: [], mean: 0, stdDev: 0 };
}

export const HistogramResponse = {
  encode(message: HistogramResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.numBins !== 0) {
      writer.uint32(13).sfixed32(message.numBins);
    }
    if (message.binWidth !== 0) {
      writer.uint32(17).double(message.binWidth);
    }
    if (message.firstBinCenter !== 0) {
      writer.uint32(25).double(message.firstBinCenter);
    }
    writer.uint32(34).fork();
    for (const v of message.bins) {
      writer.sfixed32(v);
    }
    writer.ldelim();
    if (message.mean !== 0) {
      writer.uint32(41).double(message.mean);
    }
    if (message.stdDev !== 0) {
      writer.uint32(49).double(message.stdDev);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HistogramResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogramResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.numBins = reader.sfixed32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.binWidth = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.firstBinCenter = reader.double();
          continue;
        case 4:
          if (tag === 37) {
            message.bins.push(reader.sfixed32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.bins.push(reader.sfixed32());
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.mean = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.stdDev = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistogramResponse {
    return {
      numBins: isSet(object.numBins) ? globalThis.Number(object.numBins) : 0,
      binWidth: isSet(object.binWidth) ? globalThis.Number(object.binWidth) : 0,
      firstBinCenter: isSet(object.firstBinCenter) ? globalThis.Number(object.firstBinCenter) : 0,
      bins: globalThis.Array.isArray(object?.bins) ? object.bins.map((e: any) => globalThis.Number(e)) : [],
      mean: isSet(object.mean) ? globalThis.Number(object.mean) : 0,
      stdDev: isSet(object.stdDev) ? globalThis.Number(object.stdDev) : 0,
    };
  },

  toJSON(message: HistogramResponse): unknown {
    const obj: any = {};
    if (message.numBins !== 0) {
      obj.numBins = Math.round(message.numBins);
    }
    if (message.binWidth !== 0) {
      obj.binWidth = message.binWidth;
    }
    if (message.firstBinCenter !== 0) {
      obj.firstBinCenter = message.firstBinCenter;
    }
    if (message.bins?.length) {
      obj.bins = message.bins.map((e) => Math.round(e));
    }
    if (message.mean !== 0) {
      obj.mean = message.mean;
    }
    if (message.stdDev !== 0) {
      obj.stdDev = message.stdDev;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistogramResponse>, I>>(base?: I): HistogramResponse {
    return HistogramResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistogramResponse>, I>>(object: I): HistogramResponse {
    const message = createBaseHistogramResponse();
    message.numBins = object.numBins ?? 0;
    message.binWidth = object.binWidth ?? 0;
    message.firstBinCenter = object.firstBinCenter ?? 0;
    message.bins = object.bins?.map((e) => e) || [];
    message.mean = object.mean ?? 0;
    message.stdDev = object.stdDev ?? 0;
    return message;
  },
};

function createBaseSetHistogramReq(): SetHistogramReq {
  return { uuid: "", x: 0, y: 0, z: 0, width: 0, height: 0, depth: 0 };
}

export const SetHistogramReq = {
  encode(message: SetHistogramReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.x !== 0) {
      writer.uint32(21).sfixed32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(29).sfixed32(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(37).sfixed32(message.z);
    }
    if (message.width !== 0) {
      writer.uint32(45).sfixed32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(53).sfixed32(message.height);
    }
    if (message.depth !== 0) {
      writer.uint32(61).sfixed32(message.depth);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHistogramReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHistogramReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.x = reader.sfixed32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.y = reader.sfixed32();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.z = reader.sfixed32();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.width = reader.sfixed32();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.height = reader.sfixed32();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.depth = reader.sfixed32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHistogramReq {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
    };
  },

  toJSON(message: SetHistogramReq): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.z !== 0) {
      obj.z = Math.round(message.z);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHistogramReq>, I>>(base?: I): SetHistogramReq {
    return SetHistogramReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHistogramReq>, I>>(object: I): SetHistogramReq {
    const message = createBaseSetHistogramReq();
    message.uuid = object.uuid ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.depth = object.depth ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
