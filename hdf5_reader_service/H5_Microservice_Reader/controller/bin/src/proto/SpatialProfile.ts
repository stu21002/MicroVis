// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: SpatialProfile.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "proto";

export interface SetSpatialReq {
  uuid: string;
  x: number;
  y: number;
}

export interface SpatialProfile {
  start: number;
  end: number;
  rawValuesFp32: Uint8Array;
  /** repeated double values = 3; */
  coordinate: string;
}

export interface SpatialProfileData {
  uuid: string;
  profiles: SpatialProfile[];
}

function createBaseSetSpatialReq(): SetSpatialReq {
  return { uuid: "", x: 0, y: 0 };
}

export const SetSpatialReq = {
  encode(message: SetSpatialReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.x !== 0) {
      writer.uint32(21).sfixed32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(29).sfixed32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSpatialReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSpatialReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.x = reader.sfixed32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.y = reader.sfixed32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSpatialReq {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: SetSpatialReq): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSpatialReq>, I>>(base?: I): SetSpatialReq {
    return SetSpatialReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSpatialReq>, I>>(object: I): SetSpatialReq {
    const message = createBaseSetSpatialReq();
    message.uuid = object.uuid ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseSpatialProfile(): SpatialProfile {
  return { start: 0, end: 0, rawValuesFp32: new Uint8Array(0), coordinate: "" };
}

export const SpatialProfile = {
  encode(message: SpatialProfile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.start !== 0) {
      writer.uint32(13).sfixed32(message.start);
    }
    if (message.end !== 0) {
      writer.uint32(21).sfixed32(message.end);
    }
    if (message.rawValuesFp32.length !== 0) {
      writer.uint32(26).bytes(message.rawValuesFp32);
    }
    if (message.coordinate !== "") {
      writer.uint32(34).string(message.coordinate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpatialProfile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpatialProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.start = reader.sfixed32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.end = reader.sfixed32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rawValuesFp32 = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.coordinate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpatialProfile {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      rawValuesFp32: isSet(object.rawValuesFp32) ? bytesFromBase64(object.rawValuesFp32) : new Uint8Array(0),
      coordinate: isSet(object.coordinate) ? globalThis.String(object.coordinate) : "",
    };
  },

  toJSON(message: SpatialProfile): unknown {
    const obj: any = {};
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.rawValuesFp32.length !== 0) {
      obj.rawValuesFp32 = base64FromBytes(message.rawValuesFp32);
    }
    if (message.coordinate !== "") {
      obj.coordinate = message.coordinate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpatialProfile>, I>>(base?: I): SpatialProfile {
    return SpatialProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpatialProfile>, I>>(object: I): SpatialProfile {
    const message = createBaseSpatialProfile();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    message.rawValuesFp32 = object.rawValuesFp32 ?? new Uint8Array(0);
    message.coordinate = object.coordinate ?? "";
    return message;
  },
};

function createBaseSpatialProfileData(): SpatialProfileData {
  return { uuid: "", profiles: [] };
}

export const SpatialProfileData = {
  encode(message: SpatialProfileData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    for (const v of message.profiles) {
      SpatialProfile.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpatialProfileData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpatialProfileData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profiles.push(SpatialProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpatialProfileData {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => SpatialProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SpatialProfileData): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => SpatialProfile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpatialProfileData>, I>>(base?: I): SpatialProfileData {
    return SpatialProfileData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpatialProfileData>, I>>(object: I): SpatialProfileData {
    const message = createBaseSpatialProfileData();
    message.uuid = object.uuid ?? "";
    message.profiles = object.profiles?.map((e) => SpatialProfile.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
