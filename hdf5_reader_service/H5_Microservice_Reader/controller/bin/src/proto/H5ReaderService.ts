// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: H5ReaderService.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientReadableStream,
  type ClientUnaryCall,
  handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { FileInfoRequest, FileInfoResponse } from "./FileInfo";
import { FileCloseRequest, OpenFileACK, OpenFileRequest } from "./OpenFile";

export const protobufPackage = "proto";

export enum RegionType {
  POINT = 0,
  LINE = 1,
  RECTANGLE = 2,
  CIRCLE = 3,
  UNRECOGNIZED = -1,
}

export function regionTypeFromJSON(object: any): RegionType {
  switch (object) {
    case 0:
    case "POINT":
      return RegionType.POINT;
    case 1:
    case "LINE":
      return RegionType.LINE;
    case 2:
    case "RECTANGLE":
      return RegionType.RECTANGLE;
    case 3:
    case "CIRCLE":
      return RegionType.CIRCLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RegionType.UNRECOGNIZED;
  }
}

export function regionTypeToJSON(object: RegionType): string {
  switch (object) {
    case RegionType.POINT:
      return "POINT";
    case RegionType.LINE:
      return "LINE";
    case RegionType.RECTANGLE:
      return "RECTANGLE";
    case RegionType.CIRCLE:
      return "CIRCLE";
    case RegionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** /////TODO Clean up code, maybe seperate into different files */
export interface Empty {
}

export interface StatusResponse {
  status: boolean;
  statusMessage: string;
}

export interface ImageDataRequest {
  uuid: string;
  regionType: RegionType;
  start: number[];
  count: number[];
}

/** Change To Bytes */
export interface ImageDataResponse {
  rawValuesFp32: Uint8Array;
  numPixels: number;
}

export interface Mask {
  mask: boolean[];
  width: number;
  height: number;
}

export interface SpectralProfileRequest {
  uuid: string;
  regionType: RegionType;
  x: number;
  y: number;
  z: number;
  numPixels: number;
  width: number;
  /** repeated bool mask = 9; */
  height: number;
}

/** Change TO Bytes */
export interface SpectralProfileResponse {
  /**
   * repeated float data = 1;
   * repeated int32 count = 2;
   */
  rawValuesFp32: Uint8Array;
  counts: Uint8Array;
}

export interface HistogramRequest {
  uuid: string;
  /**
   * int32 x = 2;
   * int32 y = 3;
   * int32 width = 4;
   * int32 height = 5;
   */
  start: number[];
  count: number[];
}

export interface HistogramDistRequest {
  uuid: string;
  /**
   * int32 x = 2;
   * int32 y = 3;
   * int32 width = 4;
   * int32 height = 5;
   */
  start: number[];
  count: number[];
  data: number[];
  numBins: number;
  binWidth: number;
  minValue: number;
  maxValue: number;
}

export interface HistogramResponse {
  numBins: number;
  binWidth: number;
  firstBinCenter: number;
  bins: number[];
  mean: number;
  stdDev: number;
}

export interface SpatialProfile {
  start: number;
  end: number;
  rawValuesFp32: Uint8Array;
  /** repeated double values = 3; */
  coordinate: string;
}

export interface SetSpatialReq {
  x: number;
  y: number;
}

export interface SpatialProfileData {
  fileId: string;
  profiles: SpatialProfile[];
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Empty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseStatusResponse(): StatusResponse {
  return { status: false, statusMessage: "" };
}

export const StatusResponse = {
  encode(message: StatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== false) {
      writer.uint32(8).bool(message.status);
    }
    if (message.statusMessage !== "") {
      writer.uint32(18).string(message.statusMessage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusResponse {
    return {
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
    };
  },

  toJSON(message: StatusResponse): unknown {
    const obj: any = {};
    if (message.status !== false) {
      obj.status = message.status;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusResponse>, I>>(base?: I): StatusResponse {
    return StatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusResponse>, I>>(object: I): StatusResponse {
    const message = createBaseStatusResponse();
    message.status = object.status ?? false;
    message.statusMessage = object.statusMessage ?? "";
    return message;
  },
};

function createBaseImageDataRequest(): ImageDataRequest {
  return { uuid: "", regionType: 0, start: [], count: [] };
}

export const ImageDataRequest = {
  encode(message: ImageDataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.regionType !== 0) {
      writer.uint32(16).int32(message.regionType);
    }
    writer.uint32(26).fork();
    for (const v of message.start) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImageDataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.regionType = reader.int32() as any;
          continue;
        case 3:
          if (tag === 24) {
            message.start.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.start.push(reader.int32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageDataRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      regionType: isSet(object.regionType) ? regionTypeFromJSON(object.regionType) : 0,
      start: globalThis.Array.isArray(object?.start) ? object.start.map((e: any) => globalThis.Number(e)) : [],
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: ImageDataRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.regionType !== 0) {
      obj.regionType = regionTypeToJSON(message.regionType);
    }
    if (message.start?.length) {
      obj.start = message.start.map((e) => Math.round(e));
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageDataRequest>, I>>(base?: I): ImageDataRequest {
    return ImageDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageDataRequest>, I>>(object: I): ImageDataRequest {
    const message = createBaseImageDataRequest();
    message.uuid = object.uuid ?? "";
    message.regionType = object.regionType ?? 0;
    message.start = object.start?.map((e) => e) || [];
    message.count = object.count?.map((e) => e) || [];
    return message;
  },
};

function createBaseImageDataResponse(): ImageDataResponse {
  return { rawValuesFp32: new Uint8Array(0), numPixels: 0 };
}

export const ImageDataResponse = {
  encode(message: ImageDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rawValuesFp32.length !== 0) {
      writer.uint32(10).bytes(message.rawValuesFp32);
    }
    if (message.numPixels !== 0) {
      writer.uint32(16).int32(message.numPixels);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImageDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rawValuesFp32 = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numPixels = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageDataResponse {
    return {
      rawValuesFp32: isSet(object.rawValuesFp32) ? bytesFromBase64(object.rawValuesFp32) : new Uint8Array(0),
      numPixels: isSet(object.numPixels) ? globalThis.Number(object.numPixels) : 0,
    };
  },

  toJSON(message: ImageDataResponse): unknown {
    const obj: any = {};
    if (message.rawValuesFp32.length !== 0) {
      obj.rawValuesFp32 = base64FromBytes(message.rawValuesFp32);
    }
    if (message.numPixels !== 0) {
      obj.numPixels = Math.round(message.numPixels);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageDataResponse>, I>>(base?: I): ImageDataResponse {
    return ImageDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageDataResponse>, I>>(object: I): ImageDataResponse {
    const message = createBaseImageDataResponse();
    message.rawValuesFp32 = object.rawValuesFp32 ?? new Uint8Array(0);
    message.numPixels = object.numPixels ?? 0;
    return message;
  },
};

function createBaseMask(): Mask {
  return { mask: [], width: 0, height: 0 };
}

export const Mask = {
  encode(message: Mask, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.mask) {
      writer.bool(v);
    }
    writer.ldelim();
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Mask {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.mask.push(reader.bool());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mask.push(reader.bool());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.width = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mask {
    return {
      mask: globalThis.Array.isArray(object?.mask) ? object.mask.map((e: any) => globalThis.Boolean(e)) : [],
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Mask): unknown {
    const obj: any = {};
    if (message.mask?.length) {
      obj.mask = message.mask;
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mask>, I>>(base?: I): Mask {
    return Mask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mask>, I>>(object: I): Mask {
    const message = createBaseMask();
    message.mask = object.mask?.map((e) => e) || [];
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseSpectralProfileRequest(): SpectralProfileRequest {
  return { uuid: "", regionType: 0, x: 0, y: 0, z: 0, numPixels: 0, width: 0, height: 0 };
}

export const SpectralProfileRequest = {
  encode(message: SpectralProfileRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.regionType !== 0) {
      writer.uint32(16).int32(message.regionType);
    }
    if (message.x !== 0) {
      writer.uint32(24).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(32).int32(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(40).int32(message.z);
    }
    if (message.numPixels !== 0) {
      writer.uint32(48).int32(message.numPixels);
    }
    if (message.width !== 0) {
      writer.uint32(56).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(64).int32(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpectralProfileRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpectralProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.regionType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.x = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.y = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.z = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.numPixels = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.width = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.height = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpectralProfileRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      regionType: isSet(object.regionType) ? regionTypeFromJSON(object.regionType) : 0,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
      numPixels: isSet(object.numPixels) ? globalThis.Number(object.numPixels) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: SpectralProfileRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.regionType !== 0) {
      obj.regionType = regionTypeToJSON(message.regionType);
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.z !== 0) {
      obj.z = Math.round(message.z);
    }
    if (message.numPixels !== 0) {
      obj.numPixels = Math.round(message.numPixels);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpectralProfileRequest>, I>>(base?: I): SpectralProfileRequest {
    return SpectralProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpectralProfileRequest>, I>>(object: I): SpectralProfileRequest {
    const message = createBaseSpectralProfileRequest();
    message.uuid = object.uuid ?? "";
    message.regionType = object.regionType ?? 0;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    message.numPixels = object.numPixels ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseSpectralProfileResponse(): SpectralProfileResponse {
  return { rawValuesFp32: new Uint8Array(0), counts: new Uint8Array(0) };
}

export const SpectralProfileResponse = {
  encode(message: SpectralProfileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rawValuesFp32.length !== 0) {
      writer.uint32(10).bytes(message.rawValuesFp32);
    }
    if (message.counts.length !== 0) {
      writer.uint32(18).bytes(message.counts);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpectralProfileResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpectralProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rawValuesFp32 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.counts = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpectralProfileResponse {
    return {
      rawValuesFp32: isSet(object.rawValuesFp32) ? bytesFromBase64(object.rawValuesFp32) : new Uint8Array(0),
      counts: isSet(object.counts) ? bytesFromBase64(object.counts) : new Uint8Array(0),
    };
  },

  toJSON(message: SpectralProfileResponse): unknown {
    const obj: any = {};
    if (message.rawValuesFp32.length !== 0) {
      obj.rawValuesFp32 = base64FromBytes(message.rawValuesFp32);
    }
    if (message.counts.length !== 0) {
      obj.counts = base64FromBytes(message.counts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpectralProfileResponse>, I>>(base?: I): SpectralProfileResponse {
    return SpectralProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpectralProfileResponse>, I>>(object: I): SpectralProfileResponse {
    const message = createBaseSpectralProfileResponse();
    message.rawValuesFp32 = object.rawValuesFp32 ?? new Uint8Array(0);
    message.counts = object.counts ?? new Uint8Array(0);
    return message;
  },
};

function createBaseHistogramRequest(): HistogramRequest {
  return { uuid: "", start: [], count: [] };
}

export const HistogramRequest = {
  encode(message: HistogramRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    writer.uint32(18).fork();
    for (const v of message.start) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(26).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HistogramRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogramRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.start.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.start.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistogramRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      start: globalThis.Array.isArray(object?.start) ? object.start.map((e: any) => globalThis.Number(e)) : [],
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: HistogramRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.start?.length) {
      obj.start = message.start.map((e) => Math.round(e));
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistogramRequest>, I>>(base?: I): HistogramRequest {
    return HistogramRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistogramRequest>, I>>(object: I): HistogramRequest {
    const message = createBaseHistogramRequest();
    message.uuid = object.uuid ?? "";
    message.start = object.start?.map((e) => e) || [];
    message.count = object.count?.map((e) => e) || [];
    return message;
  },
};

function createBaseHistogramDistRequest(): HistogramDistRequest {
  return { uuid: "", start: [], count: [], data: [], numBins: 0, binWidth: 0, minValue: 0, maxValue: 0 };
}

export const HistogramDistRequest = {
  encode(message: HistogramDistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    writer.uint32(18).fork();
    for (const v of message.start) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(26).fork();
    for (const v of message.count) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.data) {
      writer.float(v);
    }
    writer.ldelim();
    if (message.numBins !== 0) {
      writer.uint32(53).sfixed32(message.numBins);
    }
    if (message.binWidth !== 0) {
      writer.uint32(57).double(message.binWidth);
    }
    if (message.minValue !== 0) {
      writer.uint32(65).double(message.minValue);
    }
    if (message.maxValue !== 0) {
      writer.uint32(73).double(message.maxValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HistogramDistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogramDistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.start.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.start.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.count.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.count.push(reader.int32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 37) {
            message.data.push(reader.float());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.data.push(reader.float());
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.numBins = reader.sfixed32();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.binWidth = reader.double();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.minValue = reader.double();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.maxValue = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistogramDistRequest {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      start: globalThis.Array.isArray(object?.start) ? object.start.map((e: any) => globalThis.Number(e)) : [],
      count: globalThis.Array.isArray(object?.count) ? object.count.map((e: any) => globalThis.Number(e)) : [],
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => globalThis.Number(e)) : [],
      numBins: isSet(object.numBins) ? globalThis.Number(object.numBins) : 0,
      binWidth: isSet(object.binWidth) ? globalThis.Number(object.binWidth) : 0,
      minValue: isSet(object.minValue) ? globalThis.Number(object.minValue) : 0,
      maxValue: isSet(object.maxValue) ? globalThis.Number(object.maxValue) : 0,
    };
  },

  toJSON(message: HistogramDistRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.start?.length) {
      obj.start = message.start.map((e) => Math.round(e));
    }
    if (message.count?.length) {
      obj.count = message.count.map((e) => Math.round(e));
    }
    if (message.data?.length) {
      obj.data = message.data;
    }
    if (message.numBins !== 0) {
      obj.numBins = Math.round(message.numBins);
    }
    if (message.binWidth !== 0) {
      obj.binWidth = message.binWidth;
    }
    if (message.minValue !== 0) {
      obj.minValue = message.minValue;
    }
    if (message.maxValue !== 0) {
      obj.maxValue = message.maxValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistogramDistRequest>, I>>(base?: I): HistogramDistRequest {
    return HistogramDistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistogramDistRequest>, I>>(object: I): HistogramDistRequest {
    const message = createBaseHistogramDistRequest();
    message.uuid = object.uuid ?? "";
    message.start = object.start?.map((e) => e) || [];
    message.count = object.count?.map((e) => e) || [];
    message.data = object.data?.map((e) => e) || [];
    message.numBins = object.numBins ?? 0;
    message.binWidth = object.binWidth ?? 0;
    message.minValue = object.minValue ?? 0;
    message.maxValue = object.maxValue ?? 0;
    return message;
  },
};

function createBaseHistogramResponse(): HistogramResponse {
  return { numBins: 0, binWidth: 0, firstBinCenter: 0, bins: [], mean: 0, stdDev: 0 };
}

export const HistogramResponse = {
  encode(message: HistogramResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.numBins !== 0) {
      writer.uint32(13).sfixed32(message.numBins);
    }
    if (message.binWidth !== 0) {
      writer.uint32(17).double(message.binWidth);
    }
    if (message.firstBinCenter !== 0) {
      writer.uint32(25).double(message.firstBinCenter);
    }
    writer.uint32(34).fork();
    for (const v of message.bins) {
      writer.sfixed32(v);
    }
    writer.ldelim();
    if (message.mean !== 0) {
      writer.uint32(41).double(message.mean);
    }
    if (message.stdDev !== 0) {
      writer.uint32(49).double(message.stdDev);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HistogramResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogramResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.numBins = reader.sfixed32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.binWidth = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.firstBinCenter = reader.double();
          continue;
        case 4:
          if (tag === 37) {
            message.bins.push(reader.sfixed32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.bins.push(reader.sfixed32());
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.mean = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.stdDev = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistogramResponse {
    return {
      numBins: isSet(object.numBins) ? globalThis.Number(object.numBins) : 0,
      binWidth: isSet(object.binWidth) ? globalThis.Number(object.binWidth) : 0,
      firstBinCenter: isSet(object.firstBinCenter) ? globalThis.Number(object.firstBinCenter) : 0,
      bins: globalThis.Array.isArray(object?.bins) ? object.bins.map((e: any) => globalThis.Number(e)) : [],
      mean: isSet(object.mean) ? globalThis.Number(object.mean) : 0,
      stdDev: isSet(object.stdDev) ? globalThis.Number(object.stdDev) : 0,
    };
  },

  toJSON(message: HistogramResponse): unknown {
    const obj: any = {};
    if (message.numBins !== 0) {
      obj.numBins = Math.round(message.numBins);
    }
    if (message.binWidth !== 0) {
      obj.binWidth = message.binWidth;
    }
    if (message.firstBinCenter !== 0) {
      obj.firstBinCenter = message.firstBinCenter;
    }
    if (message.bins?.length) {
      obj.bins = message.bins.map((e) => Math.round(e));
    }
    if (message.mean !== 0) {
      obj.mean = message.mean;
    }
    if (message.stdDev !== 0) {
      obj.stdDev = message.stdDev;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistogramResponse>, I>>(base?: I): HistogramResponse {
    return HistogramResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistogramResponse>, I>>(object: I): HistogramResponse {
    const message = createBaseHistogramResponse();
    message.numBins = object.numBins ?? 0;
    message.binWidth = object.binWidth ?? 0;
    message.firstBinCenter = object.firstBinCenter ?? 0;
    message.bins = object.bins?.map((e) => e) || [];
    message.mean = object.mean ?? 0;
    message.stdDev = object.stdDev ?? 0;
    return message;
  },
};

function createBaseSpatialProfile(): SpatialProfile {
  return { start: 0, end: 0, rawValuesFp32: new Uint8Array(0), coordinate: "" };
}

export const SpatialProfile = {
  encode(message: SpatialProfile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.start !== 0) {
      writer.uint32(13).sfixed32(message.start);
    }
    if (message.end !== 0) {
      writer.uint32(21).sfixed32(message.end);
    }
    if (message.rawValuesFp32.length !== 0) {
      writer.uint32(26).bytes(message.rawValuesFp32);
    }
    if (message.coordinate !== "") {
      writer.uint32(34).string(message.coordinate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpatialProfile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpatialProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.start = reader.sfixed32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.end = reader.sfixed32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rawValuesFp32 = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.coordinate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpatialProfile {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      rawValuesFp32: isSet(object.rawValuesFp32) ? bytesFromBase64(object.rawValuesFp32) : new Uint8Array(0),
      coordinate: isSet(object.coordinate) ? globalThis.String(object.coordinate) : "",
    };
  },

  toJSON(message: SpatialProfile): unknown {
    const obj: any = {};
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.rawValuesFp32.length !== 0) {
      obj.rawValuesFp32 = base64FromBytes(message.rawValuesFp32);
    }
    if (message.coordinate !== "") {
      obj.coordinate = message.coordinate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpatialProfile>, I>>(base?: I): SpatialProfile {
    return SpatialProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpatialProfile>, I>>(object: I): SpatialProfile {
    const message = createBaseSpatialProfile();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    message.rawValuesFp32 = object.rawValuesFp32 ?? new Uint8Array(0);
    message.coordinate = object.coordinate ?? "";
    return message;
  },
};

function createBaseSetSpatialReq(): SetSpatialReq {
  return { x: 0, y: 0 };
}

export const SetSpatialReq = {
  encode(message: SetSpatialReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(13).sfixed32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).sfixed32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSpatialReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSpatialReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.x = reader.sfixed32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.y = reader.sfixed32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSpatialReq {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: SetSpatialReq): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSpatialReq>, I>>(base?: I): SetSpatialReq {
    return SetSpatialReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSpatialReq>, I>>(object: I): SetSpatialReq {
    const message = createBaseSetSpatialReq();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseSpatialProfileData(): SpatialProfileData {
  return { fileId: "", profiles: [] };
}

export const SpatialProfileData = {
  encode(message: SpatialProfileData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fileId !== "") {
      writer.uint32(10).string(message.fileId);
    }
    for (const v of message.profiles) {
      SpatialProfile.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpatialProfileData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpatialProfileData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profiles.push(SpatialProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpatialProfileData {
    return {
      fileId: isSet(object.fileId) ? globalThis.String(object.fileId) : "",
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => SpatialProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SpatialProfileData): unknown {
    const obj: any = {};
    if (message.fileId !== "") {
      obj.fileId = message.fileId;
    }
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => SpatialProfile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpatialProfileData>, I>>(base?: I): SpatialProfileData {
    return SpatialProfileData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpatialProfileData>, I>>(object: I): SpatialProfileData {
    const message = createBaseSpatialProfileData();
    message.fileId = object.fileId ?? "";
    message.profiles = object.profiles?.map((e) => SpatialProfile.fromPartial(e)) || [];
    return message;
  },
};

export type H5ReadersService = typeof H5ReadersService;
export const H5ReadersService = {
  checkStatus: {
    path: "/proto.H5Readers/CheckStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  openFile: {
    path: "/proto.H5Readers/OpenFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenFileRequest) => Buffer.from(OpenFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OpenFileRequest.decode(value),
    responseSerialize: (value: OpenFileACK) => Buffer.from(OpenFileACK.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OpenFileACK.decode(value),
  },
  closeFile: {
    path: "/proto.H5Readers/CloseFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileCloseRequest) => Buffer.from(FileCloseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileCloseRequest.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  getFileInfo: {
    path: "/proto.H5Readers/GetFileInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileInfoRequest) => Buffer.from(FileInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileInfoRequest.decode(value),
    responseSerialize: (value: FileInfoResponse) => Buffer.from(FileInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileInfoResponse.decode(value),
  },
  getImageDataStream: {
    path: "/proto.H5Readers/GetImageDataStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ImageDataRequest) => Buffer.from(ImageDataRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ImageDataRequest.decode(value),
    responseSerialize: (value: ImageDataResponse) => Buffer.from(ImageDataResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ImageDataResponse.decode(value),
  },
  getSpectralProfile: {
    path: "/proto.H5Readers/GetSpectralProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SpectralProfileRequest) => Buffer.from(SpectralProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SpectralProfileRequest.decode(value),
    responseSerialize: (value: SpectralProfileResponse) => Buffer.from(SpectralProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpectralProfileResponse.decode(value),
  },
  getSpectralProfileStream: {
    path: "/proto.H5Readers/GetSpectralProfileStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SpectralProfileRequest) => Buffer.from(SpectralProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SpectralProfileRequest.decode(value),
    responseSerialize: (value: SpectralProfileResponse) => Buffer.from(SpectralProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpectralProfileResponse.decode(value),
  },
  getHistogram: {
    path: "/proto.H5Readers/GetHistogram",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HistogramRequest) => Buffer.from(HistogramRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HistogramRequest.decode(value),
    responseSerialize: (value: HistogramResponse) => Buffer.from(HistogramResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HistogramResponse.decode(value),
  },
  getHistogramDist: {
    path: "/proto.H5Readers/GetHistogramDist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HistogramDistRequest) => Buffer.from(HistogramDistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HistogramDistRequest.decode(value),
    responseSerialize: (value: HistogramResponse) => Buffer.from(HistogramResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HistogramResponse.decode(value),
  },
} as const;

export interface H5ReadersServer extends UntypedServiceImplementation {
  checkStatus: handleUnaryCall<Empty, StatusResponse>;
  openFile: handleUnaryCall<OpenFileRequest, OpenFileACK>;
  closeFile: handleUnaryCall<FileCloseRequest, StatusResponse>;
  getFileInfo: handleUnaryCall<FileInfoRequest, FileInfoResponse>;
  getImageDataStream: handleServerStreamingCall<ImageDataRequest, ImageDataResponse>;
  getSpectralProfile: handleUnaryCall<SpectralProfileRequest, SpectralProfileResponse>;
  getSpectralProfileStream: handleServerStreamingCall<SpectralProfileRequest, SpectralProfileResponse>;
  getHistogram: handleUnaryCall<HistogramRequest, HistogramResponse>;
  getHistogramDist: handleUnaryCall<HistogramDistRequest, HistogramResponse>;
}

export interface H5ReadersClient extends Client {
  checkStatus(
    request: Empty,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getImageDataStream(
    request: ImageDataRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getImageDataStream(
    request: ImageDataRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getSpectralProfile(
    request: SpectralProfileRequest,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfileStream(
    request: SpectralProfileRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SpectralProfileResponse>;
  getSpectralProfileStream(
    request: SpectralProfileRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SpectralProfileResponse>;
  getHistogram(
    request: HistogramRequest,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogramDist(
    request: HistogramDistRequest,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogramDist(
    request: HistogramDistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogramDist(
    request: HistogramDistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
}

export const H5ReadersClient = makeGenericClientConstructor(H5ReadersService, "proto.H5Readers") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): H5ReadersClient;
  service: typeof H5ReadersService;
  serviceName: string;
};

export type H5ServicesService = typeof H5ServicesService;
export const H5ServicesService = {
  checkStatus: {
    path: "/proto.H5Services/CheckStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  openFile: {
    path: "/proto.H5Services/OpenFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenFileRequest) => Buffer.from(OpenFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OpenFileRequest.decode(value),
    responseSerialize: (value: OpenFileACK) => Buffer.from(OpenFileACK.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OpenFileACK.decode(value),
  },
  closeFile: {
    path: "/proto.H5Services/CloseFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileCloseRequest) => Buffer.from(FileCloseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileCloseRequest.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  getFileInfo: {
    path: "/proto.H5Services/GetFileInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileInfoRequest) => Buffer.from(FileInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileInfoRequest.decode(value),
    responseSerialize: (value: FileInfoResponse) => Buffer.from(FileInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileInfoResponse.decode(value),
  },
  getImageDataStream: {
    path: "/proto.H5Services/GetImageDataStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ImageDataRequest) => Buffer.from(ImageDataRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ImageDataRequest.decode(value),
    responseSerialize: (value: ImageDataResponse) => Buffer.from(ImageDataResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ImageDataResponse.decode(value),
  },
  getSpatialProfile: {
    path: "/proto.H5Services/GetSpatialProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetSpatialReq) => Buffer.from(SetSpatialReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetSpatialReq.decode(value),
    responseSerialize: (value: SpatialProfileData) => Buffer.from(SpatialProfileData.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpatialProfileData.decode(value),
  },
  getSpectralProfile: {
    path: "/proto.H5Services/GetSpectralProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SpectralProfileRequest) => Buffer.from(SpectralProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SpectralProfileRequest.decode(value),
    responseSerialize: (value: SpectralProfileResponse) => Buffer.from(SpectralProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpectralProfileResponse.decode(value),
  },
  getHistogram: {
    path: "/proto.H5Services/GetHistogram",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HistogramRequest) => Buffer.from(HistogramRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HistogramRequest.decode(value),
    responseSerialize: (value: HistogramResponse) => Buffer.from(HistogramResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HistogramResponse.decode(value),
  },
} as const;

export interface H5ServicesServer extends UntypedServiceImplementation {
  checkStatus: handleUnaryCall<Empty, StatusResponse>;
  openFile: handleUnaryCall<OpenFileRequest, OpenFileACK>;
  closeFile: handleUnaryCall<FileCloseRequest, StatusResponse>;
  getFileInfo: handleUnaryCall<FileInfoRequest, FileInfoResponse>;
  getImageDataStream: handleServerStreamingCall<ImageDataRequest, ImageDataResponse>;
  getSpatialProfile: handleUnaryCall<SetSpatialReq, SpatialProfileData>;
  getSpectralProfile: handleUnaryCall<SpectralProfileRequest, SpectralProfileResponse>;
  getHistogram: handleUnaryCall<HistogramRequest, HistogramResponse>;
}

export interface H5ServicesClient extends Client {
  checkStatus(
    request: Empty,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getImageDataStream(
    request: ImageDataRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getImageDataStream(
    request: ImageDataRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getSpatialProfile(
    request: SetSpatialReq,
    callback: (error: ServiceError | null, response: SpatialProfileData) => void,
  ): ClientUnaryCall;
  getSpatialProfile(
    request: SetSpatialReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpatialProfileData) => void,
  ): ClientUnaryCall;
  getSpatialProfile(
    request: SetSpatialReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpatialProfileData) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
}

export const H5ServicesClient = makeGenericClientConstructor(H5ServicesService, "proto.H5Services") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): H5ServicesClient;
  service: typeof H5ServicesService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
