// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: H5ReaderService.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientReadableStream,
  type ClientUnaryCall,
  handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { FileInfoRequest, FileInfoResponse } from "./FileInfo";
import { HistogramDistRequest, HistogramRequest, HistogramResponse, SetHistogramReq } from "./Histogram";
import { ImageDataRequest, ImageDataResponse } from "./ImageData";
import { FileCloseRequest, OpenFileACK, OpenFileRequest } from "./OpenFile";
import { SetRegion, SetRegionAck } from "./Region";
import { SetSpatialReq, SpatialProfileData } from "./SpatialProfile";
import {
  SpectralProfileReaderRequest,
  SpectralProfileReaderResponse,
  SpectralProfileRequest,
  SpectralProfileResponse,
} from "./SpectralProfile";
import { Empty, StatusResponse } from "./defs";

export const protobufPackage = "proto";

export interface Mask {
  mask: boolean[];
  width: number;
  height: number;
}

function createBaseMask(): Mask {
  return { mask: [], width: 0, height: 0 };
}

export const Mask = {
  encode(message: Mask, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.mask) {
      writer.bool(v);
    }
    writer.ldelim();
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Mask {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.mask.push(reader.bool());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mask.push(reader.bool());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.width = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mask {
    return {
      mask: globalThis.Array.isArray(object?.mask) ? object.mask.map((e: any) => globalThis.Boolean(e)) : [],
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Mask): unknown {
    const obj: any = {};
    if (message.mask?.length) {
      obj.mask = message.mask;
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mask>, I>>(base?: I): Mask {
    return Mask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mask>, I>>(object: I): Mask {
    const message = createBaseMask();
    message.mask = object.mask?.map((e) => e) || [];
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

export type H5ReadersService = typeof H5ReadersService;
export const H5ReadersService = {
  checkStatus: {
    path: "/proto.H5Readers/CheckStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  openFile: {
    path: "/proto.H5Readers/OpenFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenFileRequest) => Buffer.from(OpenFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OpenFileRequest.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  closeFile: {
    path: "/proto.H5Readers/CloseFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileCloseRequest) => Buffer.from(FileCloseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileCloseRequest.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  getFileInfo: {
    path: "/proto.H5Readers/GetFileInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileInfoRequest) => Buffer.from(FileInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileInfoRequest.decode(value),
    responseSerialize: (value: FileInfoResponse) => Buffer.from(FileInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileInfoResponse.decode(value),
  },
  getImageDataStream: {
    path: "/proto.H5Readers/GetImageDataStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ImageDataRequest) => Buffer.from(ImageDataRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ImageDataRequest.decode(value),
    responseSerialize: (value: ImageDataResponse) => Buffer.from(ImageDataResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ImageDataResponse.decode(value),
  },
  getSpectralProfile: {
    path: "/proto.H5Readers/GetSpectralProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SpectralProfileReaderRequest) =>
      Buffer.from(SpectralProfileReaderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SpectralProfileReaderRequest.decode(value),
    responseSerialize: (value: SpectralProfileReaderResponse) =>
      Buffer.from(SpectralProfileReaderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpectralProfileReaderResponse.decode(value),
  },
  getHistogram: {
    path: "/proto.H5Readers/GetHistogram",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HistogramRequest) => Buffer.from(HistogramRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HistogramRequest.decode(value),
    responseSerialize: (value: HistogramResponse) => Buffer.from(HistogramResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HistogramResponse.decode(value),
  },
  getHistogramDist: {
    path: "/proto.H5Readers/GetHistogramDist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HistogramDistRequest) => Buffer.from(HistogramDistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HistogramDistRequest.decode(value),
    responseSerialize: (value: HistogramResponse) => Buffer.from(HistogramResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HistogramResponse.decode(value),
  },
} as const;

export interface H5ReadersServer extends UntypedServiceImplementation {
  checkStatus: handleUnaryCall<Empty, StatusResponse>;
  openFile: handleUnaryCall<OpenFileRequest, StatusResponse>;
  closeFile: handleUnaryCall<FileCloseRequest, StatusResponse>;
  getFileInfo: handleUnaryCall<FileInfoRequest, FileInfoResponse>;
  getImageDataStream: handleServerStreamingCall<ImageDataRequest, ImageDataResponse>;
  getSpectralProfile: handleUnaryCall<SpectralProfileReaderRequest, SpectralProfileReaderResponse>;
  getHistogram: handleUnaryCall<HistogramRequest, HistogramResponse>;
  getHistogramDist: handleUnaryCall<HistogramDistRequest, HistogramResponse>;
}

export interface H5ReadersClient extends Client {
  checkStatus(
    request: Empty,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getImageDataStream(
    request: ImageDataRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getImageDataStream(
    request: ImageDataRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getSpectralProfile(
    request: SpectralProfileReaderRequest,
    callback: (error: ServiceError | null, response: SpectralProfileReaderResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileReaderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpectralProfileReaderResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileReaderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpectralProfileReaderResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: HistogramRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogramDist(
    request: HistogramDistRequest,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogramDist(
    request: HistogramDistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogramDist(
    request: HistogramDistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
}

export const H5ReadersClient = makeGenericClientConstructor(H5ReadersService, "proto.H5Readers") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): H5ReadersClient;
  service: typeof H5ReadersService;
  serviceName: string;
};

export type H5ServicesService = typeof H5ServicesService;
export const H5ServicesService = {
  checkStatus: {
    path: "/proto.H5Services/CheckStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  openFile: {
    path: "/proto.H5Services/OpenFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenFileRequest) => Buffer.from(OpenFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OpenFileRequest.decode(value),
    responseSerialize: (value: OpenFileACK) => Buffer.from(OpenFileACK.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OpenFileACK.decode(value),
  },
  closeFile: {
    path: "/proto.H5Services/CloseFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileCloseRequest) => Buffer.from(FileCloseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileCloseRequest.decode(value),
    responseSerialize: (value: StatusResponse) => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StatusResponse.decode(value),
  },
  getFileInfo: {
    path: "/proto.H5Services/GetFileInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FileInfoRequest) => Buffer.from(FileInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileInfoRequest.decode(value),
    responseSerialize: (value: FileInfoResponse) => Buffer.from(FileInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileInfoResponse.decode(value),
  },
  createRegion: {
    path: "/proto.H5Services/CreateRegion",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetRegion) => Buffer.from(SetRegion.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetRegion.decode(value),
    responseSerialize: (value: SetRegionAck) => Buffer.from(SetRegionAck.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SetRegionAck.decode(value),
  },
  getImageDataStream: {
    path: "/proto.H5Services/GetImageDataStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ImageDataRequest) => Buffer.from(ImageDataRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ImageDataRequest.decode(value),
    responseSerialize: (value: ImageDataResponse) => Buffer.from(ImageDataResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ImageDataResponse.decode(value),
  },
  getSpatialProfile: {
    path: "/proto.H5Services/GetSpatialProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetSpatialReq) => Buffer.from(SetSpatialReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetSpatialReq.decode(value),
    responseSerialize: (value: SpatialProfileData) => Buffer.from(SpatialProfileData.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpatialProfileData.decode(value),
  },
  getSpectralProfile: {
    path: "/proto.H5Services/GetSpectralProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SpectralProfileRequest) => Buffer.from(SpectralProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SpectralProfileRequest.decode(value),
    responseSerialize: (value: SpectralProfileResponse) => Buffer.from(SpectralProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SpectralProfileResponse.decode(value),
  },
  getHistogram: {
    path: "/proto.H5Services/GetHistogram",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetHistogramReq) => Buffer.from(SetHistogramReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetHistogramReq.decode(value),
    responseSerialize: (value: HistogramResponse) => Buffer.from(HistogramResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HistogramResponse.decode(value),
  },
} as const;

export interface H5ServicesServer extends UntypedServiceImplementation {
  checkStatus: handleUnaryCall<Empty, StatusResponse>;
  openFile: handleUnaryCall<OpenFileRequest, OpenFileACK>;
  closeFile: handleUnaryCall<FileCloseRequest, StatusResponse>;
  getFileInfo: handleUnaryCall<FileInfoRequest, FileInfoResponse>;
  createRegion: handleUnaryCall<SetRegion, SetRegionAck>;
  getImageDataStream: handleServerStreamingCall<ImageDataRequest, ImageDataResponse>;
  getSpatialProfile: handleUnaryCall<SetSpatialReq, SpatialProfileData>;
  getSpectralProfile: handleUnaryCall<SpectralProfileRequest, SpectralProfileResponse>;
  getHistogram: handleUnaryCall<SetHistogramReq, HistogramResponse>;
}

export interface H5ServicesClient extends Client {
  checkStatus(
    request: Empty,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  checkStatus(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenFileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OpenFileACK) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  closeFile(
    request: FileCloseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  getFileInfo(
    request: FileInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileInfoResponse) => void,
  ): ClientUnaryCall;
  createRegion(
    request: SetRegion,
    callback: (error: ServiceError | null, response: SetRegionAck) => void,
  ): ClientUnaryCall;
  createRegion(
    request: SetRegion,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SetRegionAck) => void,
  ): ClientUnaryCall;
  createRegion(
    request: SetRegion,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SetRegionAck) => void,
  ): ClientUnaryCall;
  getImageDataStream(
    request: ImageDataRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getImageDataStream(
    request: ImageDataRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ImageDataResponse>;
  getSpatialProfile(
    request: SetSpatialReq,
    callback: (error: ServiceError | null, response: SpatialProfileData) => void,
  ): ClientUnaryCall;
  getSpatialProfile(
    request: SetSpatialReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpatialProfileData) => void,
  ): ClientUnaryCall;
  getSpatialProfile(
    request: SetSpatialReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpatialProfileData) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getSpectralProfile(
    request: SpectralProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SpectralProfileResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: SetHistogramReq,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: SetHistogramReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
  getHistogram(
    request: SetHistogramReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistogramResponse) => void,
  ): ClientUnaryCall;
}

export const H5ServicesClient = makeGenericClientConstructor(H5ServicesService, "proto.H5Services") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): H5ServicesClient;
  service: typeof H5ServicesService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
