"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: OpenFile.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCloseRequest = exports.OpenFileACK = exports.OpenFileRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const defs_1 = require("./defs");
exports.protobufPackage = "proto";
function createBaseOpenFileRequest() {
    return { uuid: "", file: "", directory: "", hdu: "" };
}
exports.OpenFileRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.uuid !== "") {
            writer.uint32(10).string(message.uuid);
        }
        if (message.file !== "") {
            writer.uint32(18).string(message.file);
        }
        if (message.directory !== "") {
            writer.uint32(26).string(message.directory);
        }
        if (message.hdu !== "") {
            writer.uint32(34).string(message.hdu);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOpenFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.uuid = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.file = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.directory = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hdu = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
            file: isSet(object.file) ? globalThis.String(object.file) : "",
            directory: isSet(object.directory) ? globalThis.String(object.directory) : "",
            hdu: isSet(object.hdu) ? globalThis.String(object.hdu) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uuid !== "") {
            obj.uuid = message.uuid;
        }
        if (message.file !== "") {
            obj.file = message.file;
        }
        if (message.directory !== "") {
            obj.directory = message.directory;
        }
        if (message.hdu !== "") {
            obj.hdu = message.hdu;
        }
        return obj;
    },
    create(base) {
        return exports.OpenFileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseOpenFileRequest();
        message.uuid = (_a = object.uuid) !== null && _a !== void 0 ? _a : "";
        message.file = (_b = object.file) !== null && _b !== void 0 ? _b : "";
        message.directory = (_c = object.directory) !== null && _c !== void 0 ? _c : "";
        message.hdu = (_d = object.hdu) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseOpenFileACK() {
    return { success: false, message: "", fileInfo: undefined, fileInfoExtended: undefined };
}
exports.OpenFileACK = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.fileInfo !== undefined) {
            defs_1.FileInfo.encode(message.fileInfo, writer.uint32(26).fork()).ldelim();
        }
        if (message.fileInfoExtended !== undefined) {
            defs_1.FileInfoExtended.encode(message.fileInfoExtended, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOpenFileACK();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fileInfo = defs_1.FileInfo.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fileInfoExtended = defs_1.FileInfoExtended.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            fileInfo: isSet(object.fileInfo) ? defs_1.FileInfo.fromJSON(object.fileInfo) : undefined,
            fileInfoExtended: isSet(object.fileInfoExtended) ? defs_1.FileInfoExtended.fromJSON(object.fileInfoExtended) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.fileInfo !== undefined) {
            obj.fileInfo = defs_1.FileInfo.toJSON(message.fileInfo);
        }
        if (message.fileInfoExtended !== undefined) {
            obj.fileInfoExtended = defs_1.FileInfoExtended.toJSON(message.fileInfoExtended);
        }
        return obj;
    },
    create(base) {
        return exports.OpenFileACK.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOpenFileACK();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        message.fileInfo = (object.fileInfo !== undefined && object.fileInfo !== null)
            ? defs_1.FileInfo.fromPartial(object.fileInfo)
            : undefined;
        message.fileInfoExtended = (object.fileInfoExtended !== undefined && object.fileInfoExtended !== null)
            ? defs_1.FileInfoExtended.fromPartial(object.fileInfoExtended)
            : undefined;
        return message;
    },
};
function createBaseFileCloseRequest() {
    return { uuid: "" };
}
exports.FileCloseRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.uuid !== "") {
            writer.uint32(10).string(message.uuid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileCloseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.uuid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.uuid !== "") {
            obj.uuid = message.uuid;
        }
        return obj;
    },
    create(base) {
        return exports.FileCloseRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFileCloseRequest();
        message.uuid = (_a = object.uuid) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
