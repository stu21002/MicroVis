"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.12.4
// source: defs.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileInfoExtended = exports.FileInfo = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "proto";
function createBaseFileInfo() {
    return { name: "", size: 0, HDUList: [], date: 0 };
}
exports.FileInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.size !== 0) {
            writer.uint32(25).sfixed64(message.size);
        }
        for (const v of message.HDUList) {
            writer.uint32(34).string(v);
        }
        if (message.date !== 0) {
            writer.uint32(41).sfixed64(message.date);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 25) {
                        break;
                    }
                    message.size = longToNumber(reader.sfixed64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.HDUList.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.date = longToNumber(reader.sfixed64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
            HDUList: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.HDUList) ? object.HDUList.map((e) => globalThis.String(e)) : [],
            date: isSet(object.date) ? globalThis.Number(object.date) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        if ((_a = message.HDUList) === null || _a === void 0 ? void 0 : _a.length) {
            obj.HDUList = message.HDUList;
        }
        if (message.date !== 0) {
            obj.date = Math.round(message.date);
        }
        return obj;
    },
    create(base) {
        return exports.FileInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseFileInfo();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.size = (_b = object.size) !== null && _b !== void 0 ? _b : 0;
        message.HDUList = ((_c = object.HDUList) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.date = (_d = object.date) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseFileInfoExtended() {
    return { dimensions: 0, width: 0, height: 0, depth: 0, stokes: 0 };
}
exports.FileInfoExtended = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.dimensions !== 0) {
            writer.uint32(13).sfixed32(message.dimensions);
        }
        if (message.width !== 0) {
            writer.uint32(21).sfixed32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(29).sfixed32(message.height);
        }
        if (message.depth !== 0) {
            writer.uint32(37).sfixed32(message.depth);
        }
        if (message.stokes !== 0) {
            writer.uint32(45).sfixed32(message.stokes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileInfoExtended();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.dimensions = reader.sfixed32();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.width = reader.sfixed32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.height = reader.sfixed32();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.depth = reader.sfixed32();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.stokes = reader.sfixed32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dimensions: isSet(object.dimensions) ? globalThis.Number(object.dimensions) : 0,
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
            stokes: isSet(object.stokes) ? globalThis.Number(object.stokes) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dimensions !== 0) {
            obj.dimensions = Math.round(message.dimensions);
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.depth !== 0) {
            obj.depth = Math.round(message.depth);
        }
        if (message.stokes !== 0) {
            obj.stokes = Math.round(message.stokes);
        }
        return obj;
    },
    create(base) {
        return exports.FileInfoExtended.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseFileInfoExtended();
        message.dimensions = (_a = object.dimensions) !== null && _a !== void 0 ? _a : 0;
        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;
        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;
        message.depth = (_d = object.depth) !== null && _d !== void 0 ? _d : 0;
        message.stokes = (_e = object.stokes) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
